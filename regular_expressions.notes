# Regular Expressions
==============================================================

// Test Method - Regex Boolean
[js]
let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString);
// result == true

// and / or Operators
let petString = "James has a pet cat.";
let petRegex = /cat|dog|bird|fish/; // Change this line
let result = petRegex.test(petString);

// flags
// i - ignore case
// g - extracts pattern more than once
let stringRegex = /string/gi;

// Match Method - Returns matched regex
let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/;
let result = extractStr.match(codingRegex); // result == coding

// Wildcard Character - matches any character
let unRegex = /.un/; // matches run, fun, sun, etc...
//Negate Charater
let unRegex = /[^aeiou]/; // (When in brackets) Negates all vowels

// Character Classes - matches every character in square brackets
let vowelRegex = /[aeiou]/ig; // matches a, e, i, o, and u
let vowelRegex = /b[ai]g/ig; // matches big and bag
let vowelRegex = /[a-e]/ig; // matches all letters a through e
let vowelRegex = /[a-e4-7]/ig; // matches all letters a through e and 4 through 7

// Match Characters that Occur One or More Times
let difficultSpelling = "Mississippi";
let myRegex = /s+/g;
let result = difficultSpelling.match(myRegex);
// returns [ss,ss]

// Match Characters that Occur Zero or More Times (*)
let chewieQuote = "Aaaaaaaaaaaaaaaarrrgh!";
let chewieRegex = /Aa*/;
let result = chewieQuote.match(chewieRegex);
// returns 'Aaaaaaaaaaaaaaaa'

// Characters with Lazy Matching (?)
let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?>/; 
let result = text.match(myRegex);
// returns ['<h1>','</h1>']

// Match Beginning String Patterns (^)
let rickyAndCal = "Cal and Ricky both like racing.";
let calRegex = /^Cal/;
let result = calRegex.test(rickyAndCal);

//Match Ending String Patterns
let caboose = "The last car on a train is the caboose";
let lastRegex = /caboose$/; 
let result = lastRegex.test(caboose);

// Specify Upper and Lower Number of Matches
let ohStr = "Ohhh no";
let ohRegex = /Oh{3,6} /;
let result = ohRegex.test(ohStr);
// Matches "Ohhh no" but not "Ohhhhhhh no"


[end]